plugins {
    id "com.android.library"
    id "kotlin-android"
}

def withThirdPartySupport = false

android {
    compileSdkVersion versions.agp.compileSdk
    // buildToolsVersion versions.agp.buildTools
    ndkVersion versions.agp.ndk

    defaultConfig {
        minSdkVersion versions.agp.minSdk
        targetSdkVersion versions.agp.targetSdk

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                // Sets a flag to enable format macro constants for the C compiler.
                cFlags "-DHAVE_STDLIB_H", "-DHAVE_STRING_H", "-D__STDC_FORMAT_MACROS"

                // Sets optional flags for the C++ compiler.
                cppFlags "-fexceptions", "-frtti", "-std=c++14"

                // Specifies the targets Gradle should build
                targets "agent-ndk" // , "agent-ndk-test"

                // Passes optional arguments to CMake.
                arguments "-DAGENT_VERSION=${project.version}", "-DCMAKE_BUILD_TYPE=Debug"
            }
        }

        ndk {
            // https://developer.android.com/ndk/guides/abis#sa
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64', 'x86'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version versions.cpp.cmake
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
            all {
                environment 'LD_LIBRARY_PATH', "${buildDir}/intermediates/cmake/debug/obj/x86_64/"
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                    outputs.upToDateWhen { false }
                    showStandardStreams = true
                }
            }
        }
    }
}

dependencies {
    // implementation newrelic.deps.agent
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin.plugin}"

    // https://android-developers.googleblog.com/2020/02/native-dependencies-in-android-studio-40.html
    if (withThirdPartySupport) {
        implementation 'com.android.ndk.thirdparty:jsoncpp:1.8.4-alpha-1'
    }

    testImplementation 'org.robolectric:robolectric:' + project.versions.test.robolectric
    testImplementation 'junit:junit:' + project.versions.test.junit
    testImplementation 'org.mockito:mockito-core:' + project.versions.test.mockitoCore
    testImplementation 'org.mockito.kotlin:mockito-kotlin:' + project.versions.kotlin.mockito
    testImplementation 'org.json:json:20190722'
    // testImplementation newrelic.deps.agent
    testImplementation fileTree(dir: 'libs', include: ['*.jar'])


    testImplementation 'androidx.test:core:' + project.versions.test.androidxCore
    testImplementation 'androidx.test.ext:junit-ktx:1.1.3'
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

task install(type: Upload) {
    afterEvaluate() {
        repositories {
            mavenInstaller {
                configuration = configurations.archives
                pom.groupId = 'com.newrelic.agent.android'
                pom.artifactId = 'agent-ndk'
                pom.version = rootProject.version
            }
        }
    }
}


/**
 * kudos: https://sureshjoshi.com/mobile/android-junit-native-libraries/
 */

/*
def osxDir = projectDir.absolutePath + '/.cxx/cmake/debug/osx/'

task createBuildDir() {
    def folder = new File(osxDir)
    if (!folder.exists()) {
        folder.mkdirs()
    }
}

task cmake(type: Exec) {
    dependsOn createBuildDir
    workingDir osxDir
    commandLine "/usr/local/bin/cmake"
    args "${projectDir.absolutePath}/src/main/cpp"
}

task cmake_test(type: Exec) {
    dependsOn createBuildDir
    workingDir osxDir
    commandLine "/usr/local/bin/cmake"
    args "${projectDir.absolutePath}/src/test/cpp"
}

task make(type: Exec) {
    dependsOn cmake
    workingDir osxDir
    commandLine "make"
}

project.afterEvaluate {
    // Not sure how much of a hack this is - but it allows CMake/SWIG to run before Android Studio
    // complains about missing generated files
    // TODO: Probably need a release hook too?
    javaPreCompileDebug.dependsOn externalNativeBuildDebug
    // if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
    javaPreCompileDebugAndroidTest.dependsOn make
    // }
}
*/


/* TODO

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // The following applies a component to this publication
                // which results in publishing an app bundle.
                from components.paidRelease_aab

                groupId = 'com.newrelic.android'
                artifactId = 'agent-ndk'
                version = '1.0'
            }
        }
    }
}

/* TODO */
