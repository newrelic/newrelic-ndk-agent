/**
 * Copyright 2021-present New Relic Corporation. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id "com.android.library"
    id "kotlin-android"
}

def bootstrap = properties.get("newrelic.bootstrap") as Boolean

android {
    compileSdkVersion versions.agp.compileSdk
    ndkVersion versions.agp.ndk

    defaultConfig {
        minSdkVersion versions.agp.minSdk
        targetSdkVersion versions.agp.targetSdk

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                // Sets a flag to enable format macro constants for the C compiler.
                cFlags "-DHAVE_STDLIB_H", "-DHAVE_STRING_H", "-D__STDC_FORMAT_MACROS"

                // Sets optional flags for the C++ compiler.
                cppFlags "-fexceptions", "-frtti", "-std=c++14"

                // Specifies the targets Gradle should build
                targets "agent-ndk" // , "agent-ndk-test"

                // Passes optional arguments to CMake.
                arguments "-DAGENT_VERSION=${project.version}", "-DCMAKE_BUILD_TYPE=Debug"
            }
        }

        ndk {
            // https://developer.android.com/ndk/guides/abis#sa
            abiFilters 'x86_64', 'arm64-v8a', 'x86'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version versions.agp.cmake
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
            all {
                environment 'LD_LIBRARY_PATH', "${buildDir}/intermediates/cmake/debug/obj/x86_64/"
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                    outputs.upToDateWhen { false }
                    showStandardStreams = true
                }
            }
        }
    }
}

dependencies {
    if (bootstrap) {
        logger.warn("Bootstrapping module")
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        testImplementation fileTree(dir: 'libs', include: ['*.jar'])
    } else {
        implementation newrelic.deps.agent
        testImplementation newrelic.deps.agent
    }

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin.plugin}"

    // https://android-developers.googleblog.com/2020/02/native-dependencies-in-android-studio-40.html
    if (withThirdPartySupport) {
        implementation 'com.android.ndk.thirdparty:jsoncpp:1.8.4-alpha-1'
    }

    testImplementation 'org.robolectric:robolectric:' + project.versions.test.robolectric
    testImplementation 'junit:junit:' + project.versions.test.junit
    testImplementation 'org.mockito:mockito-core:' + project.versions.test.mockitoCore
    testImplementation 'org.mockito.kotlin:mockito-kotlin:' + project.versions.kotlin.mockito
    testImplementation 'org.json:json:20190722'

    testImplementation 'androidx.test:core:' + project.versions.test.androidxCore
    testImplementation 'androidx.test.ext:junit-ktx:1.1.3'
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

afterEvaluate {
    def optionalOf = { key, defaultValue -> rootProject.hasProperty(key) ? rootProject[key] : defaultValue }

    def isSnapshotDeploy = (
            (optionalOf("newrelic.version.build", 'SNAPSHOT') != 'SNAPSHOT') &&
                    (optionalOf("sonatypeUsername", null) != null) &&
                    (optionalOf("sonatypePassword", null) != null))

    publishing {
        repositories {
            if (isSnapshotDeploy) {
                maven {
                    name "snapshots"
                    url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    credentials {
                        username = rootProject['sonatypeUsername']
                        password = rootProject['sonatypePassword']
                    }
                }
            }
        }

        publications {
            release(MavenPublication) {
                // The following applies a component to this publication
                // which results in publishing dr app bundle.
                from components.release

                groupId = 'com.newrelic.agent.android'
                artifactId = 'agent-ndk'
                version = project.newrelic.version

                pom {
                    name = 'com.newrelic.agent.android.agent-ndk'
                    description = 'The New Relic Android Native Agent provides crash reporting for Android NDK applications'
                    url = 'https://newrelic.com'
                    packaging = 'aar'

                    licenses {
                        license {
                            url = 'https://github.com/newrelic/android-agent-ndk/blob/main/LICENSE'
                        }
                    }

                    developers {
                        developer {
                            id = 'mobile-agents-team'
                            name = 'Mobile Agents Team'
                            email = 'mobile-agents@newrelic.com'
                        }
                    }

                    scm {
                        url = 'scm:git:https://github.com/newrelic/android-agent-ndk.git'
                        connection = 'scm:git:https://github.com/newrelic/android-agent-ndk.git'
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.release
        required {
            gradle.taskGraph.hasTask("publishReleasePublicationToSnapshotsRepository")
        }
    }

    tasks.register("install") {
        dependsOn publishToMavenLocal
        description "Publishes all Maven artifacts produced by this project to the local Maven cache. " +
                "Replacement for the legacy 'maven' plugin task."
        group "publishing"
    }

}
